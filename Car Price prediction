#Divya
# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
car_data_path = "/content/drive/MyDrive/datasets/car_data.csv"
data = pd.read_csv(car_data_path)

# Display basic information about the dataset
print("Dataset Information:")
print(data.info())

data.head()

data.info()

data.describe()

data.isnull().sum()

# EDA
data['Owner'].value_counts()

# Exploring Categorical Features
data['Car_Name'].value_counts()

import matplotlib.pyplot as plt
import seaborn as sns

data['Fuel_Type'].value_counts()
sns.countplot(x='Fuel_Type', data=data)
plt.show()

data['Selling_type'].value_counts()
sns.countplot(x='Selling_type', data=data)
plt.show()

data['Transmission'].value_counts()
sns.countplot(x='Transmission', data=data)
plt.show()

# Exploring Numerical features
data.hist(bins=20, figsize=(15, 10))
plt.show()

# Finding relationships between different numerical features and our target features
plt.figure(figsize=(16, 6))
plt.subplot(1, 3, 1)
sns.scatterplot(x='Year', y='Selling_Price', data=data)
plt.subplot(1, 3, 2)

sns.scatterplot(x='Present_Price', y='Selling_Price', data=data)
plt.subplot(1, 3, 3)

sns.scatterplot(x='Driven_kms', y='Selling_Price', data=data)
plt.tight_layout()
plt.show()

# Finding Relationship between Cars and its Selling price using BOXPlot
plt.figure(figsize=(16,12))
sns.boxplot(x='Car_Name', y='Selling_Price', data=data)
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(16, 8))
plt.subplot(1, 2, 1)

sns.boxplot(x='Fuel_Type', y='Selling_Price', data=data)
plt.title('Relationship between Fuel type and Selling Price')
plt.subplot(1, 2, 2)

sns.boxplot(x='Transmission', y='Selling_Price', data=data)
plt.title('Relationship between Transmission and Selling price')
plt.tight_layout()
plt.show()

# Model Building
# Split the dataset into features
X = data.drop('Selling_Price', axis=1)
y = data['Selling_Price']

# One-hot encoding categorical values into numerical values
X_encoded = pd.get_dummies(X, columns=['Fuel_Type', 'Selling_type', 'Transmission','Car_Name'], prefix=['Fuel', 'Selling', 'Transmission','Cars'])

# Splitting the dataset
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Train a Regression Model
from sklearn.linear_model import LinearRegression
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)
y_pred_linear = linear_model.predict(X_test)

# Evaluating the Regression Model
from sklearn.metrics import mean_squared_error
from math import sqrt
mse_linear = mean_squared_error(y_test, y_pred_linear)
rmse_linear = sqrt(mse_linear)
print(f'Linear Regression RMSE: {rmse_linear}')
